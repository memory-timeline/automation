---
name: Setup golang, lint, test, check build, optionally create build artifact
on:
  workflow_call:
    inputs:
      update-image:
        default: 'false'
        type: string
      aws-region:
        description: "AWS region"
        type: string
      ecr-url:
        description: "AWS ECR Url for account"
        type: string
      image-name:
        type: string
      workspace:
        type: string
      version:
        type: string
    outputs:
      lint:
        description: "Outcome of terraform fmt -check"
        value: ${{ jobs.build.outputs.lint }}
      test:
        description: "Outcome of terraform init"
        value: ${{ jobs.build.outputs.test }}
      build:
        description: "Outcome of terraform validate"
        value: ${{ jobs.build.outputs.build }}
      image-build:
        description: "Outcome of docker image build"
        value: ${{ jobs.build.outputs.image-build }}
    secrets:
      aws-access-key-id:
      aws-secret-access-key:

jobs:
  build:
    name: golang-lint-test-build
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.lint.outcome }}
      test: ${{ steps.test.outcome }}
      build: ${{ steps.build.outcome }}
      image-build: ${{ steps.image-build.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        if: ${{ inputs.update-image == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: 'no'


      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Lint
        id: lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.29

      - name: Test
        id: test
        run: go test -v ./...

      - name: Build
        id: build
        run: go build -v ./...

      - name: Image Build
        id: image-build
        run: docker build -t ${{ inputs.image-name }} .

      - name: Authenticate Docker cli to AWS ECR
        if: ${{ inputs.update-image == 'true' }}
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag image to match repo name
        if: ${{ inputs.update-image == 'true' }}
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        run: |
          docker tag ${{ inputs.image-name }} $REGISTRY/${{ inputs.image-name }}:${{ inputs.workspace }}-${{ inputs.version }}
          docker tag ${{ inputs.image-name }} $REGISTRY/${{ inputs.image-name }}:${{ inputs.workspace }}

      - name: Deploy image
        if: ${{ inputs.update-image == 'true' }}
        run: |
          docker push $REGISTRY/${{ inputs.image-name }}:${{ inputs.workspace }}-${{ inputs.version }}
          docker push $REGISTRY/${{ inputs.image-name }}:${{ inputs.workspace }}
