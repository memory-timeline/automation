---
name: Setup terraform and plan
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      workspace:
        required: true
        type: string
    outputs:
      fmt:
        description: "Outcome of terraform fmt -check"
        value: ${{ jobs.plan-infra.outputs.fmt }}
      init:
        description: "Outcome of terraform init"
        value: ${{ jobs.plan-infra.outputs.init }}
      validate:
        description: "Outcome of terraform validate"
        value: ${{ jobs.plan-infra.outputs.validate }}
      plan:
        description: "Outcome of terraform plan"
        value: ${{ jobs.plan-infra.outputs.plan }}
      plan-output:
        description: "Output of terraform plan"
        value: ${{ jobs.plan-infra.outputs.plan-output }}
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  plan-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      fmt: ${{ steps.fmt.outcome }}
      init: ${{ steps.init.outcome }}
      validate: ${{ steps.validate.outcome }}
      plan: ${{ steps.plan.outcome }}
      plan-output: ${{ steps.plan.outputs.stdout }}

    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: 'no'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform workspace Select
        id: workspace-select
        run: terraform workspace select ${{ inputs.workspace }}
        continue-on-error: true

      - name: Terraform Workspace Create
        id: workspace
        if: steps.workspace-select.outcome == 'failure'
        run: terraform workspace new ${{ inputs.workspace }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -refresh=true
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
